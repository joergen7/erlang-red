[{"id":"dc897f402c53697f","type":"tab","label":"[.breadboard] MQTT broker as flow","disabled":false,"info":"## MQTT from the ground up\n\nThis work is based on work by [@cymplecy](https://discourse.nodered.org/u/cymplecy/summary) and can be found over at the [Node-RED forum](https://discourse.nodered.org/t/fun-exercise-make-an-mqtt-broker-in-node-red/82229).\n\nThe initial commit of this flow is the original flow as found at [google cloud](https://drive.google.com/file/d/1uY-IV8KPYE5W3uL-oc9ozRvwdBHtzpcG/view?usp=sharing).\n\n## Step 1 - Convert Blockly nodes to Function nodes\n\nErlang-Red does not and probably never will support [Blockly](https://flows.nodered.org/node/node-red-contrib-blockly) since it generates Javascript code.\n\nBut since it does display the JS code, I took the code made function nodes out of the code.\n\nThis allows me to import the flow into Erlang-Red where I have to convert everything to Erlang.\n\n","env":[{"name":"ERED_PENDING","type":"bool","value":"true"}]},{"id":"ded413082f65543c","type":"group","z":"dc897f402c53697f","name":"Send to client","style":{"label":true},"nodes":["af9f5d0d7cea3ddd","7d8a1c95eebd10b5","86d40617a04bb66d","cde7df7a94f9c8a2"],"x":1645,"y":383,"w":322,"h":142},{"id":"80c12efc3d845fa3","type":"junction","z":"dc897f402c53697f","x":1187,"y":405,"wires":[["03e661a4f7ee610f"]]},{"id":"03e661a4f7ee610f","type":"junction","z":"dc897f402c53697f","x":1227,"y":365,"wires":[["d354d045491e70f7"]]},{"id":"31506b5de764bcf7","type":"junction","z":"dc897f402c53697f","x":680.1895083189011,"y":446.0233108997345,"wires":[["5f3ddf0b4c97e847"]]},{"id":"2f7ce9613861e288","type":"junction","z":"dc897f402c53697f","x":694.0611860752106,"y":417.1428532600403,"wires":[["26d3a84f0b5c547e"]]},{"id":"497bc47bdb7eaa8e","type":"junction","z":"dc897f402c53697f","x":661.7579638957977,"y":473.60934829711914,"wires":[["0c8ae20f5bca7f97"]]},{"id":"436fe3764090873b","type":"junction","z":"dc897f402c53697f","x":634.5509853363037,"y":499.1428475379944,"wires":[["46100fb0a08b0c5c"]]},{"id":"77b3e857bdd8c765","type":"junction","z":"dc897f402c53697f","x":1227,"y":685,"wires":[["e396e5ee280efc86","4012ad0d8a2cfb0c"]]},{"id":"8fd3cccdbffacd09","type":"junction","z":"dc897f402c53697f","x":367,"y":585,"wires":[["b25834b00dc17621","4d0ffeae2a76b8b0"]]},{"id":"cde7df7a94f9c8a2","type":"junction","z":"dc897f402c53697f","g":"ded413082f65543c","x":1761,"y":484,"wires":[["7d8a1c95eebd10b5","af9f5d0d7cea3ddd"]]},{"id":"27dff75b654d8823","type":"junction","z":"dc897f402c53697f","x":679.0204229354858,"y":354.4489758014679,"wires":[["1e8e2648ed67d5c6"]]},{"id":"a2a2dbd44189a0d9","type":"junction","z":"dc897f402c53697f","x":691.857127904892,"y":385.8571262359619,"wires":[["618215b887917904"]]},{"id":"98c9651dbea8582c","type":"debug","z":"dc897f402c53697f","name":"Incoming","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"payload","statusType":"msg","x":267,"y":445,"wires":[]},{"id":"38440ad2e824817e","type":"tcp in","z":"dc897f402c53697f","name":"","server":"server","host":"","port":"2883","datamode":"stream","datatype":"buffer","newline":"","topic":"","trim":false,"base64":false,"tls":"","x":90,"y":391,"wires":[["98c9651dbea8582c","44cd3d3f4ee84f1c"]]},{"id":"8b955da886c2db79","type":"inject","z":"dc897f402c53697f","name":"Publish  top=Test","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"Test","payload":"What From client on broker machine","payloadType":"str","x":184,"y":964,"wires":[["8a7d115c75d00cb2"]]},{"id":"8a7d115c75d00cb2","type":"mqtt out","z":"dc897f402c53697f","name":"MQTT Out","topic":"","qos":"0","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"da2f91c287ad12f7","x":402,"y":1047,"wires":[]},{"id":"e4321e5c01b16c27","type":"change","z":"dc897f402c53697f","name":"set CONNACK","rules":[{"t":"set","p":"payload","pt":"msg","to":"[\"0b00100000\",2,0,0]","tot":"bin"}],"action":"","property":"","from":"","to":"","reg":false,"x":1047,"y":365,"wires":[["03e661a4f7ee610f","539c9d2c592d393b"]]},{"id":"3addc59737a0ed8a","type":"switch","z":"dc897f402c53697f","name":"Route \\n packet type","property":"controlbyte","propertyType":"msg","rules":[{"t":"eq","v":"0b00000001","vt":"num"},{"t":"eq","v":"0b00001100","vt":"num"},{"t":"eq","v":"0b00000011","vt":"num"},{"t":"eq","v":"0b00001000","vt":"num"},{"t":"eq","v":"0b00001010","vt":"num"},{"t":"eq","v":"0b00001110","vt":"num"},{"t":"else"}],"checkall":"true","repair":false,"outputs":7,"x":489,"y":404,"wires":[["27dff75b654d8823"],["a2a2dbd44189a0d9"],["2f7ce9613861e288"],["31506b5de764bcf7"],["497bc47bdb7eaa8e"],["436fe3764090873b"],["5c5cf4cf97698822"]]},{"id":"1e8e2648ed67d5c6","type":"change","z":"dc897f402c53697f","name":"CONNECT","rules":[{"p":"mqttPacket.type","pt":"msg","t":"set","to":"CONNECT","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":817,"y":351,"wires":[["e4321e5c01b16c27","03561c2e4510609a"]]},{"id":"5c5cf4cf97698822","type":"debug","z":"dc897f402c53697f","name":"Unexpected","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":497,"y":505,"wires":[]},{"id":"618215b887917904","type":"change","z":"dc897f402c53697f","name":"PINGREQ","rules":[{"p":"mqttPacket.type","pt":"msg","t":"set","to":"PINGREQ","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":817,"y":405,"wires":[["c078fde4eaa67651","59d1f5eaff7bc315"]]},{"id":"c078fde4eaa67651","type":"change","z":"dc897f402c53697f","name":"Set PINGACK","rules":[{"t":"set","p":"payload","pt":"msg","to":"[208,0]","tot":"bin"}],"action":"","property":"","from":"","to":"","reg":false,"x":1047,"y":405,"wires":[["80c12efc3d845fa3","07e8b93b1a84af24"]]},{"id":"d354d045491e70f7","type":"link out","z":"dc897f402c53697f","name":"link out 3","mode":"link","links":["86d40617a04bb66d"],"x":1292,"y":365,"wires":[]},{"id":"03561c2e4510609a","type":"debug","z":"dc897f402c53697f","name":"debug 352","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"CONNECT rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":922,"y":345,"wires":[],"l":false},{"id":"539c9d2c592d393b","type":"debug","z":"dc897f402c53697f","name":"debug 353","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"CONNACK sent\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1198,"y":278,"wires":[],"l":false},{"id":"59d1f5eaff7bc315","type":"debug","z":"dc897f402c53697f","name":"debug 354","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"PINGREQ rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":922,"y":425,"wires":[],"l":false},{"id":"07e8b93b1a84af24","type":"debug","z":"dc897f402c53697f","name":"debug 355","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"PINGRESP sent\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1228,"y":445,"wires":[],"l":false},{"id":"b8a6812cb8f0e9c5","type":"change","z":"dc897f402c53697f","name":"PUBLISH","rules":[{"t":"set","p":"mqttPacket.type","pt":"msg","to":"PUBLISH","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":807,"y":505,"wires":[["88419b83727f1149","8f829e2401b0dad4"]]},{"id":"88419b83727f1149","type":"debug","z":"dc897f402c53697f","name":"debug 356","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"PUBLISH rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":882,"y":545,"wires":[],"l":false},{"id":"26d3a84f0b5c547e","type":"switch","z":"dc897f402c53697f","name":"Only QoS0","property":"qos","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":817,"y":465,"wires":[["b8a6812cb8f0e9c5"]]},{"id":"4d0ffeae2a76b8b0","type":"mqtt in","z":"dc897f402c53697f","name":"MQTT In","topic":"","qos":"2","datatype":"auto-detect","broker":"da2f91c287ad12f7","nl":false,"rap":true,"rh":0,"inputs":1,"x":467,"y":585,"wires":[["9048a940e9c269d8","eb63f1261f783d43"]]},{"id":"c4ab9a480d2b5300","type":"inject","z":"dc897f402c53697f","name":"Subscribe to Test","props":[{"p":"action","v":"subscribe","vt":"str"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"Test","x":247,"y":565,"wires":[["8fd3cccdbffacd09"]]},{"id":"eb63f1261f783d43","type":"debug","z":"dc897f402c53697f","name":"Subscribtions","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":527,"y":656,"wires":[]},{"id":"5f3ddf0b4c97e847","type":"change","z":"dc897f402c53697f","name":"SUBSCRIBE","rules":[{"t":"set","p":"mqttPacket.type","pt":"msg","to":"SUBSCRIBE","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":817,"y":605,"wires":[["2e29be5597431a04","944d14965ae42f8e"]]},{"id":"2e29be5597431a04","type":"debug","z":"dc897f402c53697f","name":"debug 359","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"SUBSCRIBE rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":922,"y":645,"wires":[],"l":false},{"id":"f8bb574706073725","type":"inject","z":"dc897f402c53697f","name":"Unsuscribe","props":[{"p":"action","v":"unsubscribe","vt":"str"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"Test","x":227,"y":605,"wires":[["8fd3cccdbffacd09"]]},{"id":"c548723aabcb824d","type":"inject","z":"dc897f402c53697f","name":"Connect","props":[{"p":"action","v":"connect","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":267,"y":525,"wires":[["8fd3cccdbffacd09"]]},{"id":"f8e2d913c7a2e082","type":"inject","z":"dc897f402c53697f","name":"Disconnect","props":[{"p":"action","v":"disconnect","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":247,"y":645,"wires":[["8fd3cccdbffacd09"]]},{"id":"462f8d53f850d053","type":"delay","z":"dc897f402c53697f","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1317,"y":490,"wires":[["d06e1719fc770910","d4d4146f6450bcaa"]]},{"id":"d06e1719fc770910","type":"link out","z":"dc897f402c53697f","name":"link out 6","mode":"link","links":["86d40617a04bb66d"],"x":1462,"y":490,"wires":[]},{"id":"da3f84ead8ae89dc","type":"debug","z":"dc897f402c53697f","name":"debug 363","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"SUBACK sent\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1385,"y":620,"wires":[],"l":false},{"id":"2343c09d75092ba6","type":"link out","z":"dc897f402c53697f","name":"link out 7","mode":"link","links":["86d40617a04bb66d"],"x":1385,"y":580,"wires":[]},{"id":"46100fb0a08b0c5c","type":"change","z":"dc897f402c53697f","name":"DISCONNECT","rules":[{"p":"mqttPacket.type","pt":"msg","t":"set","to":"DISCONNECT","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":827,"y":765,"wires":[["73a8064f83d4db2a","2293bce4f75e3f8f"]]},{"id":"73a8064f83d4db2a","type":"debug","z":"dc897f402c53697f","name":"debug 364","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"DISCONNECT rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1023,"y":765,"wires":[],"l":false},{"id":"0c8ae20f5bca7f97","type":"change","z":"dc897f402c53697f","name":"UNSUBSCRIBE","rules":[{"p":"mqttPacket.type","pt":"msg","t":"set","to":"UNSUBSCRIBE","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":827,"y":685,"wires":[["81ad923686dfe8d9","19b6c227507e6e6b"]]},{"id":"81ad923686dfe8d9","type":"debug","z":"dc897f402c53697f","name":"debug 365","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"UNSUBSCRIBE rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":922,"y":725,"wires":[],"l":false},{"id":"e396e5ee280efc86","type":"link out","z":"dc897f402c53697f","name":"link out 8","mode":"link","links":["86d40617a04bb66d"],"x":1282,"y":645,"wires":[]},{"id":"4012ad0d8a2cfb0c","type":"debug","z":"dc897f402c53697f","name":"debug 366","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"UNSUBACK sent\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1282,"y":685,"wires":[],"l":false},{"id":"d4d4146f6450bcaa","type":"debug","z":"dc897f402c53697f","name":"debug 371","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"Message sent to subscriber\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1452,"y":530,"wires":[],"l":false},{"id":"9048a940e9c269d8","type":"debug","z":"dc897f402c53697f","name":"debug 372","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"Subscribed msg rcvd\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":572,"y":585,"wires":[],"l":false},{"id":"49784831a30cafba","type":"inject","z":"dc897f402c53697f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":174,"y":781,"wires":[["518fff983ad277ba"]]},{"id":"e8aa1ac2a31edcd5","type":"debug","z":"dc897f402c53697f","name":"debug 374","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":627,"y":758,"wires":[]},{"id":"b25834b00dc17621","type":"delay","z":"dc897f402c53697f","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":411,"y":728,"wires":[["518fff983ad277ba"]]},{"id":"94fd08bb1f03e37f","type":"inject","z":"dc897f402c53697f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":188,"y":911,"wires":[["1a3b6d773654e9b5"]]},{"id":"af9f5d0d7cea3ddd","type":"tcp out","z":"dc897f402c53697f","g":"ded413082f65543c","name":"","host":"","port":"","beserver":"reply","base64":false,"end":false,"tls":"","x":1871,"y":484,"wires":[]},{"id":"7d8a1c95eebd10b5","type":"debug","z":"dc897f402c53697f","g":"ded413082f65543c","name":"Sent","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"payload","statusType":"msg","x":1871,"y":424,"wires":[]},{"id":"86d40617a04bb66d","type":"link in","z":"dc897f402c53697f","g":"ded413082f65543c","name":"TCP reply","links":["d354d045491e70f7","d06e1719fc770910","2343c09d75092ba6","e396e5ee280efc86","7f8884244ee2814f"],"x":1686,"y":484,"wires":[["cde7df7a94f9c8a2"]]},{"id":"19b6c227507e6e6b","type":"function","z":"dc897f402c53697f","name":"function 44","func":"var rcvdPayload, _sessionId, MessageId, topicLength, topicName, homemadeSub, newHomemadeSub, i2, UNSUBACK, item;\n\nfunction convertValueToByte(value) {\n  if (isNaN(value)) {\n    return value.charCodeAt(0);\n  } else {\n    if (Buffer.isBuffer(value)) {\n      return value[0];\n    } else {\n      if (value === \" \") {\n        return value.charCodeAt(0);\n      } else {\n        return Math.min(Math.max(value, 0),255);\n      }\n    }\n  }\n}\n\n\nrcvdPayload = (msg['payload']);\n_sessionId = (msg['_session']['id']);\nMessageId = 256 * (rcvdPayload[3 - 1]) + (rcvdPayload[4 - 1]);\ntopicLength = 256 * (rcvdPayload[5 - 1]) + (rcvdPayload[6 - 1]);\ntopicName = rcvdPayload.slice(6, 6 + topicLength);\ntopicName = (topicName.toString(\"utf8\"));\nhomemadeSub = (flow.get('homemadeSub'));\nif (!('mqttPacket.unsubscribe' in msg)) {\n  msg['mqttPacket']['unsubscribe'] = ({});\n}\nmsg['mqttPacket']['unsubscribe']['topicName'] = topicName;\nmsg['mqttPacket']['unsubscribe']['MessageId'] = MessageId;\nif (homemadeSub.length > 0) {\n  newHomemadeSub = [];\n  var i2_end = homemadeSub.length;\n  var i2_inc = 1;\n  if (1 > i2_end) {\n    i2_inc = -i2_inc;\n  }\n  for (i2 = 1; i2_inc >= 0 ? i2 <= i2_end : i2 >= i2_end; i2 += i2_inc) {\n    item = homemadeSub[(i2 - 1)];\n    if (!(item[0] == _sessionId && item[1] == topicName)) {\n      newHomemadeSub.push(item);\n    }\n  }\n  flow.set('homemadeSub', newHomemadeSub);\n}\nnode.status({fill:\"blue\", shape:\"ring\", text:([MessageId,':',topicLength,':',topicName].join(''))});\nUNSUBACK = (Buffer.alloc(4));\nUNSUBACK[1 - 1] = (Buffer.alloc(1, 176))[0];\nUNSUBACK[2 - 1] = (Buffer.alloc(1, 2))[0];\nUNSUBACK[3 - 1] = convertValueToByte((rcvdPayload[3 - 1]));\nUNSUBACK[4 - 1] = convertValueToByte((rcvdPayload[4 - 1]));\nmsg['payload'] = UNSUBACK;\nnode.send([msg, null]);\nmsg['payload'] = rcvdPayload;\nnode.send([null, msg]);\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1059,"y":688,"wires":[["77b3e857bdd8c765"],[]]},{"id":"8f829e2401b0dad4","type":"function","z":"dc897f402c53697f","name":"ack publish & publish payload","func":"#{ <<\"payload\">> := InPayload } = Msg,\n\n{RemLength, VarHeaderAndPubPayload} = mqtt_packet_helpers:remlength(InPayload),\n\n{TopicName, PubPayload} = mqtt_packet_helpers:topicname(VarHeaderAndPubPayload),\n\nSep = <<\" : \">>,\n\nnode_helpers:status_with_clear(Msg, NodeDef, \n                     <<TopicName/bytes, Sep/bytes, PubPayload/bytes>>, green, dot, 5),\n\n[ Msg#{ <<\"payload\">> => [<<4:4,0:4,1:8,0:8,0:8>>] }, %% PubAck packet - keeps publisher happy\n  Msg#{ <<\"topicName\">> => TopicName, <<\"mqttpayload\">> => PubPayload }\n]\n\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1064,"y":506,"wires":[["462f8d53f850d053"],["f5abc9793ac1fc62"]]},{"id":"8ac017d985b99893","type":"erlmodule","z":"dc897f402c53697f","name":"","module_name":"store_subscriptions","code":"%%\n%% State machine that stores the subscriptions created by MQTT clients.\n%% It just stores a mapping from subscription topic to a collection of \n%% tcp session ids.\n%%\n-module(store_subscriptions).\n\n-behaviour(gen_statem).\n\n-export([\n    start/0,\n    init/1,\n    callback_mode/0,\n    handle_event/4,\n    code_change/4,\n    terminate/3,\n    stop/0\n]).\n\ncallback_mode() -> handle_event_function.\n\n-define(KEEP_STATE(ReplyWith),\n    {keep_state, Store, [{reply, From, ReplyWith}]}\n).\n\n%% API.  This example uses a registered name name()\n%% and does not link to the caller.\nstart() ->\n    gen_statem:start({local, ?MODULE}, ?MODULE, [], []).\n\ninit([]) ->\n    State = storing,\n    Data = #{subscriptions => []},\n    {ok, State, Data}.\n\n%% Mandatory callback functions\nstop() ->\n    gen_statem:stop(?MODULE).\nterminate(_Reason, _State, _Data) ->\n    void.\ncode_change(_Vsn, State, Data, _Extra) ->\n    {ok,State,Data}.\n\n%%\n%% handler function for state transistions\n%%\n\n\n%%\n%% ------------- Initiated actions\n%%\n%% Connection initiated and state is disconnected --> allow connection and\n%% store the SessionId associated with connection and move to state \"connected\".\nhandle_event(\n  {call, From},\n  {<<\"subscribe\">>, [SessionId, Topic]},\n  storing,\n  #{ subscriptions := Subscriptions } = OldStore\n) ->\n    Store = case lists:keyfind({Topic, SessionId}, 4, Subscriptions) of\n        false ->\n            #{ subscriptions => [{sub, Topic, SessionId, {Topic, SessionId}} | Subscriptions]};\n        _ ->\n            OldStore\n    end,\n    ?KEEP_STATE(<<\"ok\">>);\n\n%% Connection being initiated but state is already connected however SessionIds\n%% match so this is re-initiating the same connection --> ok\nhandle_event(\n  {call, From},\n  {<<\"unsubscribe\">>, [SessionId, Topic]},\n  storing,\n  #{ subscriptions := Subscriptions }\n) ->\n    Store = #{ subscriptions => lists:keydelete({Topic, SessionId}, 4, Subscriptions) },\n    ?KEEP_STATE(<<\"ok\">>);\n\nhandle_event(\n  {call, From},\n  {<<\"subscriptions\">>, _},\n  storing,\n  #{ subscriptions := Subscriptions } = Store\n) ->\n    ?KEEP_STATE([{T,S} || {sub, T,S, {T,S}} <- Subscriptions]);\n\nhandle_event(\n  {call, From},\n  {<<\"clear\">>, _},\n  storing,\n  #{ subscriptions := Subscriptions }\n) ->\n    Store = #{ subscriptions => [] },\n    ?KEEP_STATE(<<\"ok\">>);\n\nhandle_event(\n  {call, From},\n  {<<\"unsubscribe_session_id\">>, SessionId},\n  storing,\n  #{ subscriptions := Subscriptions }\n) ->\n    Store = #{ subscriptions =>  delete_all_subscriptions_for_session(SessionId, Subscriptions)},\n    ?KEEP_STATE(<<\"ok\">>);\n\nhandle_event(\n  {call, From},\n  {<<\"unsubscribe_all_from_topic\">>, Topic},\n  storing,\n  #{ subscriptions := Subscriptions }\n) ->\n    Store = #{ subscriptions =>  delete_all_topic_subscribers(Topic, Subscriptions) },\n    ?KEEP_STATE(<<\"ok\">>);\n\nhandle_event(\n  {call, From},\n  {<<\"subs_for_topic\">>, Topic},\n  storing,\n  #{ subscriptions := Subscriptions } = Store\n) ->\n    ?KEEP_STATE([S || {sub, T,S, {T,S}} <- subs_for_topic(Topic, Subscriptions, [])]);\n\n%%\n%% Fall through.\nhandle_event({call, From} = EventType, Stiff, State, Store) ->\n    io:format(\"TEST (call): ~p ~p ~p ~p~n\",[EventType, Stiff, State, Store]),\n    ?KEEP_STATE(<<\"not_allowed\">>);\n\nhandle_event(EventType, Stiff, State, Store) ->\n    io:format(\"TEST : ~p ~p ~p ~p~n\",[EventType, Stiff, State, Store]),\n    {keep_state, Store}.\n\n\n%%\n%% Helpers\nsubs_for_topic(Topic, Subscriptions, Acc) ->\n    case lists:keytake(Topic, 2, Subscriptions) of\n        false ->\n            Acc;\n        {value, Sub, NewList} ->\n            subs_for_topic(Topic, NewList, [Sub | Acc])\n    end.\n\ndelete_all_topic_subscribers(Topic, Subscriptions) ->\n    case lists:keytake(Topic, 2, Subscriptions) of\n        false ->\n            Subscriptions;\n        {value, _, NewList} ->\n            delete_all_topic_subscribers(Topic, NewList)\n    end.\n\n%%\n%%\ndelete_all_subscriptions_for_session(SessionId, Subscriptions) ->\n    case lists:keytake(SessionId, 3, Subscriptions) of\n        false ->\n            Subscriptions;\n        {value, _, NewList} ->\n            delete_all_subscriptions_for_session(SessionId, NewList)\n    end.\n\n","x":909,"y":140,"wires":[]},{"id":"fa000edf71c93622","type":"erlstatemachine","z":"dc897f402c53697f","name":"","scope":["8ac017d985b99893"],"emit_on_state_change":false,"x":930,"y":66.5,"wires":[["6a238463862c37b4"]]},{"id":"023c321774b79ff6","type":"erlmodule","z":"dc897f402c53697f","name":"","module_name":"node_helpers","code":"-module(node_helpers).\n\n-import(ered_nodered_comm, [\n    send_out_debug_msg/4,\n    node_status/5,\n    node_status_clear/2,\n    post_exception_or_debug/3\n]).\n\n-import(ered_messages, [\n    set_prop_value/3\n]).\n\n-import(ered_nodes, [\n    send_msg_to_connected_nodes/2\n]).\n\n%%\n%% Node helpers, things that affect what the state of the node \n-export([\n    status/5,\n    status_with_clear/6,\n    exception/3,\n    debug/4,\n    unsupported/3\n]).\n\n%%\n%% Message helpers to help updating content on the message map\n-export([\n   msg_update/3,\n   msg_send/2\n]).\n\n%%\n%% Send out a message to all nodes connected this this node.\n%% A function node can then either return the message and the \n%% message will be sent again or it returns the atom `undefined` and\n%% nothing happens. Because it has already sent the messages.\n-spec msg_send(\n        Msg :: map(),\n        NodeDef :: map()\n) -> any() | none().\nmsg_send(Msg, NodeDef) ->\n    send_msg_to_connected_nodes(NodeDef, Msg).\n    \n%%\n%% Update a value in the msg, creating nested maps and lists as needed.\n%% Property is defined in `key.dot.sq[number]` form, i.e., whatever Node-RED\n%% supports, this can too.\n-spec msg_update(\n        Msg :: map(),\n        PropName :: string(),\n        Value :: any() \n) -> map().\nmsg_update( Msg, PropName, Value ) ->\n    set_prop_value(PropName, Value, Msg).\n\n%%\n%% Add a node status: \n-spec status( \n       Msg :: map(),\n       NodeDef :: map(),\n       Txt :: binary(),\n       Clr :: 'grey' | 'yellow' | 'blue' | 'red' | 'green',\n       Shp :: 'ring' | 'dot' \n) -> Msg :: map().\nstatus(#{'_ws' := WsName} = Msg, NodeDef, Txt, Clr, Shp) ->\n    node_status(WsName, NodeDef, Txt, atom_to_binary(Clr), atom_to_binary(Shp)),\n    Msg.\n\n%%\n%% show status and then clear it again after Timeout seconds\n-spec status_with_clear( \n       Msg :: map(),\n       NodeDef :: map(),\n       Txt :: binary(),\n       Clr :: 'grey' | 'yellow' | 'blue' | 'red' | 'green',\n       Shp :: 'ring' | 'dot',\n       Timeout :: integer()\n) -> Msg :: map().\nstatus_with_clear(#{'_ws' := WsName} = Msg, NodeDef, Txt, Clr, Shp, Timeout) ->\n    node_status(WsName, NodeDef, Txt, atom_to_binary(Clr), atom_to_binary(Shp)),\n    timer:apply_after(Timeout * 1000, fun() -> node_status_clear(WsName, NodeDef) end),\n    Msg.\n\n\n%%\n%% Raise an exception that can be caught by a \n%% catch node.\n-spec exception(\n        Msg :: map(),\n        NodeDef :: map(),\n        ErrorMsg :: binary()\n) -> Msg :: map().\nexception(Msg, NodeDef, ErrorMsg) ->\n    post_exception_or_debug(NodeDef, Msg, ErrorMsg),\n    Msg.\n\n%%\n%% Post a debug message to the debug panel\n-spec debug(\n        Msg :: map(),\n        NodeDef :: map(),\n        ErrorMsg :: binary(),\n        ErrorType :: 'error' | 'warning' | 'notice' | 'normal'\n) -> Msg :: map().\ndebug(Msg, NodeDef, ErrorMsg, ErrorType) ->\n    send_out_debug_msg(NodeDef, Msg, ErrorMsg, ErrorType),\n    Msg.\n\n%%\n%% Unsupported message, advices the user that something is not\n%% supported by the implementation. This will generate a mesage\n%% in the debug panel to raise the issue with the user.\n-spec unsupported(\n        Msg :: map(),\n        NodeDef :: map(),\n        ErrorMsg :: binary()\n) -> Msg :: map().\nunsupported(Msg, NodeDef, ErrorMsg) ->\n    ered_nodered_comm:unsupported(NodeDef, Msg, ErrorMsg),\n    Msg.","x":133,"y":80,"wires":[]},{"id":"e560cccf959d60d9","type":"erlmodule","z":"dc897f402c53697f","name":"","module_name":"show_subscription_details","code":"-module(show_subscription_details).\n\n-import(node_helpers, [\n    status/5\n]).\n\n-export([show/2]).\n\nshow(#{ <<\"payload\">> := [] } = Msg, NodeDef) ->\n    status(Msg, NodeDef, \"no subscriptions\", grey, ring);\n\nshow(#{ <<\"payload\">> := Lst, '_ws' := WsName} = Msg, NodeDef) ->\n    status(Msg, NodeDef, list_to_binary(io_lib:format(\"~p\",[Lst])), green, dot).\n","x":173,"y":137,"wires":[]},{"id":"6f4305f5a3962984","type":"link in","z":"dc897f402c53697f","name":"link in 1","links":[],"x":550,"y":66.5,"wires":[["fa000edf71c93622"]]},{"id":"6a238463862c37b4","type":"link out","z":"dc897f402c53697f","name":"link out 1","mode":"return","links":[],"x":1080,"y":66.5,"wires":[]},{"id":"6c126f348b04a739","type":"link in","z":"dc897f402c53697f","name":"get_subscriptions","links":[],"x":349,"y":124.5,"wires":[["d939b07bf691fd5a"]]},{"id":"d939b07bf691fd5a","type":"change","z":"dc897f402c53697f","name":"get subscriptions","rules":[{"t":"set","p":"action","pt":"msg","to":"subscriptions","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"ignored","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":593,"y":124.5,"wires":[["fa000edf71c93622"]]},{"id":"5453a29ad144ac8f","type":"function","z":"dc897f402c53697f","name":"function 1","func":"show_subscription_details:show(Msg,NodeDef),\nMsg","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":578,"y":850,"wires":[["e8aa1ac2a31edcd5"]]},{"id":"518fff983ad277ba","type":"link call","z":"dc897f402c53697f","name":"","links":["6c126f348b04a739"],"linkType":"static","timeout":"30","x":418,"y":803,"wires":[["5453a29ad144ac8f"]]},{"id":"99bd40cbdbe8b052","type":"link in","z":"dc897f402c53697f","name":"remove all subscriptions","links":[],"x":349,"y":174,"wires":[["2d5dd30a1086ad59"]]},{"id":"2d5dd30a1086ad59","type":"change","z":"dc897f402c53697f","name":"remove all subscriptions","rules":[{"t":"set","p":"action","pt":"msg","to":"clear","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"ignored","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":596,"y":174,"wires":[["fa000edf71c93622"]]},{"id":"1a3b6d773654e9b5","type":"link call","z":"dc897f402c53697f","name":"","links":["99bd40cbdbe8b052"],"linkType":"static","timeout":"30","x":396,"y":923,"wires":[["518fff983ad277ba"]]},{"id":"c6d2c1944f1d09ba","type":"change","z":"dc897f402c53697f","name":"unsubscribe session from all topics","rules":[{"t":"set","p":"action","pt":"msg","to":"unsubscribe_session_id","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"_session.id","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":590,"y":214,"wires":[["fa000edf71c93622"]]},{"id":"d75bca3f19214d01","type":"link in","z":"dc897f402c53697f","name":"unsubscribe_session_id","links":[],"x":349,"y":215,"wires":[["c6d2c1944f1d09ba"]]},{"id":"2293bce4f75e3f8f","type":"link call","z":"dc897f402c53697f","name":"","links":["d75bca3f19214d01"],"linkType":"static","timeout":"30","x":1048,"y":847,"wires":[[]]},{"id":"944d14965ae42f8e","type":"function","z":"dc897f402c53697f","name":"create subscribe payload","func":"#{ <<\"payload\">> := InPayload } = Msg,\n\nMsgId = ( (lists:nth(3,InPayload) bsl 8) + lists:nth(4,InPayload) ),\nTopicLength = ( (lists:nth(5,InPayload) bsl 8) + lists:nth(6,InPayload) ),\n<<_Header:6/bytes, TopicName:TopicLength/bytes, _/bytes>> = list_to_binary(InPayload),\n\nnode_helpers:status_with_clear(Msg, NodeDef, TopicName, green, ring, 5),\n\nM = Msg#{ \n     <<\"payload\">> => list_to_binary([144, 3, lists:nth(3,InPayload), lists:nth(4,InPayload), 0])\n},\n\nMsg2 = node_helpers:msg_update(M, \"mqttPacket.subscribe\", #{ \n   <<\"MessageId\">> => MsgId,\n   <<\"topicName\">> => TopicName\n}),\n\n[Msg2, Msg2]","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":604,"wires":[["2343c09d75092ba6","da3f84ead8ae89dc"],["e2da45201ee4031b"]]},{"id":"e2da45201ee4031b","type":"link call","z":"dc897f402c53697f","name":"","links":["fad25e160067c8db"],"linkType":"static","timeout":"30","x":1497,"y":658,"wires":[[]]},{"id":"a79b7ede76991cbf","type":"change","z":"dc897f402c53697f","name":"subscribe ssession to topic","rules":[{"t":"set","p":"action","pt":"msg","to":"subscribe","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"[$$._session.id, $$.mqttPacket.subscribe.topicName]","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":637,"y":254.5,"wires":[["fa000edf71c93622"]]},{"id":"fad25e160067c8db","type":"link in","z":"dc897f402c53697f","name":"subscribe_session_id_to_topic","links":[],"x":349,"y":255.5,"wires":[["a79b7ede76991cbf"]]},{"id":"44cd3d3f4ee84f1c","type":"function","z":"dc897f402c53697f","name":"set control byte","func":"maps:merge(Msg, mqtt_packet_helpers:controlbyte(Msg) )\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":292,"y":388,"wires":[["3addc59737a0ed8a"]]},{"id":"9c4a057d265f1bc2","type":"erlmodule","z":"dc897f402c53697f","name":"","module_name":"mqtt_packet_helpers","code":"-module(mqtt_packet_helpers).\n\n-export([\n    control/1, \n    controlbyte/1,\n    remlength/1,\n    topicname/1\n]).\n\ncontrolbyte(#{ <<\"payload\">> := Payload}) ->\n    control(Payload).\n\ncontrol([]) ->\n    #{};\n\ncontrol(V) when is_list(V) ->\n    control( list_to_binary(V));\n%%\n%% publish\ncontrol(<<3:4, Dup:1/bits, QoS:2/bits, Retain:1/bits, _/bytes>>) ->\n    #{ <<\"controlbyte\">> => 3, \n       <<\"flags\">>       => binary:decode_unsigned(<<0:4,Dup:1/bits, QoS:2/bits, Retain:1/bits>>),\n       <<\"qos\">>         => binary:decode_unsigned(<<0:6,QoS:2/bits>>),\n       <<\"duplicate\">>   => binary:decode_unsigned(<<0:7,Dup:1/bits>>),\n       <<\"retain\">>      => binary:decode_unsigned(<<0:7,Retain:1/bits>>)\n    };\n\ncontrol(<<Control:4/bits, Flag:4/bits, _/bytes>>) ->\n    #{ <<\"controlbyte\">> => binary:decode_unsigned(<<0:4,Control:4/bits>>), \n       <<\"flags\">> =>  binary:decode_unsigned(<<0:4,Flag:4/bits>>) }.\n\n%%\n%% extract the remaining length from a packet and return the\n%% rest of the packet.\n%% Remaining length has a funky encoding ... so this is a non-trivial \n%% activity.\nremlength(V) when is_list(V) ->\n    remlength(list_to_binary(V));\n    \nremlength(<<_:8/bits, 1:1, Len:7/bits, 1:1, Len2:7/bits, 1:1, Len3:7/bits, 0:1, Len4:7/bits, Rest/bytes>>) ->\n    {len_to_int(Len)  + (len_to_int(Len2) * 128) + (len_to_int(Len3) * 128 * 128) + (len_to_int(Len4) * 128 * 128 * 128), Rest};\n\nremlength(<<_:8/bits, 1:1, Len:7/bits, 1:1, Len2:7/bits, 0:1, Len3:7/bits, Rest/bytes>>) ->\n    {len_to_int(Len)  + (len_to_int(Len2) * 128) + (len_to_int(Len3) * 128 * 128), Rest};\n\nremlength(<<_:8/bits, 1:1, Len:7/bits, 0:1, Len2:7/bits, Rest/bytes>>) ->\n    {len_to_int(Len)  + (len_to_int(Len2) * 128), Rest};\n\nremlength(<<_:8/bits, 0:1, Len:7/bits, Rest/bytes>>) ->    \n    {len_to_int(Len), Rest}.\n\n\n%%\n%% Retrieve the topic name from the variable length header\ntopicname(V) when is_list(V) ->\n    topicname(list_to_binary(V));\n\ntopicname(<<MSB:1/bytes, LSB:1/bytes, Rest/bytes>>) ->\n    TotalLen = (binary:decode_unsigned(<<MSB:1/bytes>>) bsl 8) + binary:decode_unsigned(<<LSB:1/bytes>>),\n    <<TopicName:TotalLen/bytes, FinalRest/bytes>> = Rest,\n    {TopicName, FinalRest}.\n\n\n%%\n%%\nlen_to_int(Len) ->\n    binary:decode_unsigned(<<0:1,Len:7/bits>>).","x":167,"y":190,"wires":[]},{"id":"8b32bb0354fe8ae4","type":"function","z":"dc897f402c53697f","name":"function 2","func":"%%\n%% Variable header is contained in the rest.\n#{ <<\"payload\">> := InPayload } = Msg,\n\n{RemLength, VarHeaderAndPubPayload} = mqtt_packet_helpers:remlength(InPayload),\n\n{TopicName, PubPayload} = mqtt_packet_helpers:topicname(VarHeaderAndPayload),\n\nMsg#{\n\nvar rcvdMessage, homemadeSub, remainingLen, topicLength, topicName, MessageId, payload, j;\n\n\nrcvdMessage = (msg['payload']);\nhomemadeSub = (flow.get('homemadeSub'));\nremainingLen = (rcvdMessage[2 - 1]);\ntopicLength = 256 * (rcvdMessage[3 - 1]) + (rcvdMessage[4 - 1]);\ntopicName = rcvdMessage.slice(4, 4 + topicLength);\ntopicName = (topicName.toString(\"utf8\"));\nmsg['mqttPacket']['topicName'] = topicName;\nMessageId = 256 * (rcvdMessage[(5 + topicLength) - 1]) + (rcvdMessage[(6 + topicLength) - 1]);\nmsg['mqttPacket']['messageId'] = MessageId;\npayload = rcvdMessage.slice(((5 + topicLength) - 1), rcvdMessage.length);\nnode.status({fill:\"blue\", shape:\"ring\", text:([MessageId,':',topicLength,':',payload].join(''))});\npayload = (payload.toString(\"latin1\"));\nmsg['mqttPacket']['payload'] = payload;\nfor (var j_index in homemadeSub) {\n  j = homemadeSub[j_index];\n  if (j[1] == topicName) {\n    node.status({fill:\"blue\", shape:\"ring\", text:'topic match'});\n    msg['_session']['id'] = (j[0]);\n    node.send([msg]);\n  }\n}\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1642,"y":293,"wires":[[]]},{"id":"d904b3ba7ae1718d","type":"change","z":"dc897f402c53697f","name":"subscribe ssession to topic","rules":[{"t":"set","p":"action","pt":"msg","to":"subs_for_topic","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"$$.topicName","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":653,"y":297,"wires":[["fa000edf71c93622"]]},{"id":"099a121e094d2b7f","type":"link in","z":"dc897f402c53697f","name":"sessions_for_topic","links":[],"x":345,"y":298,"wires":[["d904b3ba7ae1718d"]]},{"id":"f5abc9793ac1fc62","type":"link call","z":"dc897f402c53697f","name":"","links":["099a121e094d2b7f"],"linkType":"static","timeout":"30","x":1598,"y":577,"wires":[["f5800594558eaf91"]]},{"id":"f5800594558eaf91","type":"function","z":"dc897f402c53697f","name":"send payload out","func":"#{ <<\"payload\">> := Sessions, <<\"mqttpayload\">> := Payload } = Msg,\n\n[ node_helpers:msg_send(Msg#{ <<\"payload\">> => Payload, <<\"_session\">> => #{\n    <<\"id\">> => SessionId,\n    <<\"type\">> => <<\"tcp\">>,\n    <<\"status\">>  => <<\"connected\">>\n }}, NodeDef) || SessionId <- Sessions ],\n\nundefined\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1848,"y":577,"wires":[["7f8884244ee2814f"]]},{"id":"7f8884244ee2814f","type":"link out","z":"dc897f402c53697f","name":"link out 2","mode":"link","links":["86d40617a04bb66d"],"x":2030,"y":577,"wires":[]},{"id":"da2f91c287ad12f7","type":"mqtt-broker","name":"Homemade","broker":"localhost","port":"2883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""}]
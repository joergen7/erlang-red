[{"id":"ba3d72801a820b0f","type":"tab","label":"[.breadboard] drag and drop frontend","disabled":false,"info":"## Drag & Drop & Store\n\nPart of the [open mind map](https://openmindmap.org/) idea, this flow enables drag & drop of image content onto the workspace.\n\nConsists of three components:\n\n- <a class=\"ahl-group-only\" data-ids=\"f54de819f4dd9ae5\">install custom drag & drop handler in browser</a> - that inject node triggers the execution of frontend code in the browser that installs a custom drag and drop handler.\n\n- <a class=\"ahl-group-only\" data-ids=\"abfe9a27010ac650\">image upload</a> backend that stores any image data to `/data/content`. The directory is created if not existing *and* is located in the root directory. This is intented for docker containers.\n\n- <a class=\"ahl-group-only\" data-ids=\"11d5e33de669cf2d\">image retrieval</a> backend for retrieving image data for links in documents\n\n## Why?\n\nFor a Mind Map to be useful, it must be ultra simple to add content and not only text content. Image, video and audio content should be easy to add.\n\nThe simplest form of importing data on a desktop is drag and drop. \n\nPutting these two ideas together and it becomes clear that any mind map built on Node-RED must support drag and drop. \n\nNode-RED does support drag and drop but only in a limited manner: for flow json files and image files that get draged into the description of a flow/node. The image data is then stored as base64 data in the flow - bloating the flow very quickly.\n\nInstead, content should be stored to disk and retrieved from disk.\n\n","env":[{"name":"ERED_PENDING","value":"true","type":"bool"}]},{"id":"abfe9a27010ac650","type":"group","z":"ba3d72801a820b0f","name":"image upload","style":{"label":true,"label-position":"n"},"nodes":["fc05c81222164d70","38743bd0c91a72e2","19c3214738ab7c39","f5b043069bd12085","de0300e792ac5f0f","2f360c5d587004fb","cf41acfd66c6c5f9","392aec9c291c0c7b","df6a14367a3ffe6a"],"x":402,"y":92,"w":575,"h":450},{"id":"11d5e33de669cf2d","type":"group","z":"ba3d72801a820b0f","name":"image retrieval","style":{"label":true},"nodes":["0d0551f73149a5b9","ef33744d528bc3df","1e1596f974dafebd","8112155716fb80a7","9b0d206ccd6eeb89","45d86b81b52eb217","c94eb1801f6f17d2"],"x":399.3333740234375,"y":600.5,"w":598.6666259765625,"h":272.5},{"id":"f54de819f4dd9ae5","type":"group","z":"ba3d72801a820b0f","name":"install custom drag & drop handler in browser","style":{"label":true},"nodes":["1846a099491d2951","e684694e5640b540"],"x":31,"y":99,"w":337,"h":197.5},{"id":"1846a099491d2951","type":"ClientCode","z":"ba3d72801a820b0f","g":"f54de819f4dd9ae5","name":"","clientcode":"let customDropHandler = async (event) => {\n    /* for debugging purposes - inspect the original Event to discover the type:\n    * console> window.ddEvent.originalEvent.dataTransfer.items[0].type\n    */\n    window.ddEvent = event\n\n    let itemPtr = event.originalEvent.dataTransfer.items\n    let itemCount = itemPtr.length\n\n    let audioTag = (resp) => {\n        return `<div class=\"audio-container\">\n                    <audio controls preload=none>\n                        <source src=\"${resp.relative_url}\" type=\"${resp.mimetype}\" />\n                    </audio>\n                    <p>Download <a href=\"${resp.relative_url}\" download=\"${resp.filename}\">file</a></p>\n                </div>`.replace(/\\n\\s+/g, \"\\n\")\n    }\n\n    let videoTag = (resp) => {\n        return `<div class=\"video-container\">\n                    <video width=\"${resp.width || 640}\" height=\"${resp.height || 360}\" controls=\"controls\" preload=\"none\" poster=\"${resp.poster_url}\">\n                        <source src=\"${resp.relative_url}\" type=\"${resp.mimetype}\">\n                        Your browser doesn't support HTML5 video.\n                    </video>\n                    <p>Download <a href=\"${resp.relative_url}\" download=\"${resp.filename}\">file</a></p>\n                </div>`.replace(/\\n\\s+/g, \"\\n\")\n    }\n\n    let textContent = (resp) => {\n        return `<a href='${resp.relative_url}' target=_blank>Download</a>\n        \n                [Source Link](${resp.url})                                \n                --\n                \\`\\`\\`\n                ${resp.content}\n                \\`\\`\\`\n               `.replace(/\\n\\s+/g, \"\\n\")\n    }\n\n    let imageTag = (resp) => {\n        return `![img](${resp.relative_url})`\n    }\n\n    let file2base64Image = (file, cb) => {\n        var reader = new FileReader();\n        reader.onload = (function (fd) {\n            return function (e) {\n                cb(e.target.result);\n            };\n        })(file);\n        reader.readAsDataURL(file);\n    }\n\n    let defineNodeDefaults = (yPos) => {\n        return {\n            \"id\": RED.nodes.id(),\n            \"sumPass\": false,\n            \"sumPassPrio\": 0,\n            \"sumPassNodeId\": \"\",\n            \"createdAt\": new Date().toISOString(),\n            \"updatedAt\": new Date().toISOString(),\n            \"x\": 0,\n            \"y\": yPos,\n            \"wires\": [[]]\n        }\n    }\n\n    let importNewNodes = (nde) => {\n        return RED.view.importNodes(Array.isArray(nde) ? nde : [nde])\n    }\n\n    let handleFileKind = (itm, file) => {\n        if (itm.type.startsWith(\"image/\")) {\n            let formData = new FormData();\n            formData.append('file', file, file.name);\n\n            let onError = (err) => {\n                RED.notify(`File type is not supported.`, { type: \"error\" })\n                console.log(err)\n            }\n\n            let onSuccess = (response) => {                \n                importNewNodes({\n                    ...defineNodeDefaults(0),\n                    \"type\": \"template\",\n                    \"name\": file.name,\n                    \"info\": `${imageTag(response)}\\n`,\n                })\n            }\n\n            $.ajax({\n                url: \"/writermap/content\",\n                type: \"POST\",\n                data: formData,\n                contentType: false,\n                processData: false,\n                enctype: 'multipart/form-data',\n                success: onSuccess,\n                error: onError\n            })\n        } else if (itm.type.startsWith(\"audio/\")) {\n            let formData = new FormData();\n            formData.append('file', file, file.name);\n\n            let onError = (err) => {\n                file2base64Image(file, dataUrl => {\n                    let response = {\n                        relative_url: dataUrl,\n                        mimetype: itm.type,\n                        filename: file.name\n                    }\n\n                    importNewNodes({\n                        ...defineNodeDefaults(0),\n                        \"type\": \"Audio\",\n                        \"name\": file.name,\n                        \"info\": `${audioTag(response)}\\n`,\n                    })\n                })\n            }\n\n            let onSuccess = (response) => {\n                importNewNodes({\n                    ...defineNodeDefaults(0),\n                    \"type\": \"Audio\",\n                    \"name\": file.name,\n                    \"info\": `${audioTag(response)}\\n`,\n                })\n            }\n\n            $.ajax({\n                url: \"/writermap/content\",\n                type: \"POST\",\n                data: formData,\n                contentType: false,\n                processData: false,\n                enctype: 'multipart/form-data',\n                success: onSuccess,\n                error: onError\n            })\n        } else if (itm.type.startsWith(\"video/\")) {\n            let formData = new FormData();\n            formData.append('file', file, file.name);\n\n            let onError = (err) => {\n                file2base64Image(file, dataUrl => {\n                    let response = {\n                        relative_url: dataUrl,\n                        mimetype: itm.type,\n                        filename: file.name,\n                        poster_url: \"\"\n                    }\n\n                    importNewNodes({\n                        ...defineNodeDefaults(0),\n                        \"type\": \"template\",\n                        \"name\": file.name,\n                        \"info\": `${videoTag(response)}\\n`,\n                    })\n                })\n            }\n\n            let onSuccess = (response) => {\n                importNewNodes({\n                    ...defineNodeDefaults(0),\n                    \"type\": \"template\",\n                    \"name\": file.name,\n                    \"info\": videoTag(response),\n                })\n            }\n\n            $.ajax({\n                url: \"/writermap/content\",\n                type: \"POST\",\n                data: formData,\n                contentType: false,\n                processData: false,\n                enctype: 'multipart/form-data',\n                success: onSuccess,\n                error: onError\n            })\n        } else if (itm.type == \"text/markdown\" || itm.type == \"text/plain\" || itm.type == \"\") {\n            file.arrayBuffer().then(d => {\n                importNewNodes({\n                    ...defineNodeDefaults(0),\n                    \"type\": \"template\",\n                    \"name\": file.name,\n                    \"info\": new TextDecoder().decode(d),\n                })\n            }).catch(ex => { console.log(ex) })\n        } else {\n            console.log( `Unsupported file type: ${itm.type}` )\n            RED.notify(`File type \"${itm.type}\" is not supported.`, { type: \"warning\" })\n        }\n    }\n\n    /* \n     * ***************************\n     * First part of the execution, sort between files and strings.\n     * Each item having a kind marker.\n     * ***************************\n     */\n    let stringKindsStoredForLater = {}\n    let isThisABookmarkImport = false\n    const bookmarkTypes = [\"text/x-moz-place\", \"text/x-moz-url\", \"text/uri-list\"]\n\n\n    for (let idx = 0; idx < itemCount; idx++) {\n        let itm = itemPtr[idx]\n\n        if (itm.kind == \"file\") {\n            handleFileKind(itm, event.originalEvent.dataTransfer.files[idx])\n        } else {\n            console.log(`Ignoring unsupported drag&drop kind: '${itm.kind}'`)\n            RED.notify(`Dropped item kind \"${itm.kind}\" is not supported.`, { type: \"warning\" })\n        }\n    }\n\n    /* **********************\n     * Here comes the bookmark handlers.\n     * **********************\n     */\n    let handleXMozPlace = (hsh) => {\n        /* this handles the text/x-moz-place type which has JSON content for \n         * better handling of the url details. \n         *  \n         * For example \n         *        '{\"title\":\"Instagram\",\"id\":331,\"itemGuid\":\"XXXXX\",\n         *         \"instanceId\":\"TTTTTT\",\"parent\":3,\"parentGuid\":\"toolbar_____\",\n         *         \"dateAdded\":1692630076737000,\"lastModified\":1692630076737000,\n         *         \"type\":\"text/x-moz-place\",\"uri\":\"http://instagr.am/\"}'\n         * \n         */\n        let url = hsh[\"uri\"];\n        let title = hsh[\"title\"] || \"Bookmark\"\n\n        let onError = (err) => {\n            let data = {\n                ...defineNodeDefaults(0),\n                \"type\": \"template\",\n                \"name\": title,\n                \"info\": url + \"\\n\\n\",\n                \"createdAt\": new Date(hsh[\"dateAdded\"] / 1000).toISOString(),\n                \"updatedAt\": new Date(hsh[\"lastModified\"] / 1000).toISOString(),\n            }\n\n            importNewNodes(data)\n        }\n\n\n        let onSuccess = (resp) => {\n            let data = {\n                ...defineNodeDefaults(0),\n                \"type\": \"template\",\n                \"name\": title,\n                \"info\": url + \"\\n\\n\",\n                \"createdAt\": new Date(hsh[\"dateAdded\"] / 1000).toISOString(),\n                \"updatedAt\": new Date(hsh[\"lastModified\"] / 1000).toISOString(),\n            }\n\n            if (resp.type == \"image\") {\n                data.info = `${url}\\n\\n${imageTag(resp)}\\n`\n                data.type = \"template\"\n            }\n\n            if (resp.type == \"audio\") {\n                data.info = `${url}\\n\\n${audioTag(resp)}\\n`\n                data.type = \"template\"\n            }\n\n            if (resp.type == \"video\") {\n                data.info = `${url}\\n\\n${videoTag(resp)}\\n`\n                data.type = \"template\"\n            }\n\n            if (resp.type == \"text\") {\n                data.info = textContent(resp)\n                data.type = \"template\"\n            }\n\n            importNewNodes(data)\n        }\n\n        $.ajax({\n            url: \"/writermap/content\",\n            type: \"POST\",\n            data: JSON.stringify({ bookmark_url: url }),\n            contentType: 'application/json',\n            processData: false,\n            success: onSuccess,\n            error: onError\n        })\n    }\n\n\n    if (isThisABookmarkImport) {\n        if (\"text/x-moz-place\" in stringKindsStoredForLater) {\n            handleXMozPlace(JSON.parse(stringKindsStoredForLater[\"text/x-moz-place\"][0].content))\n        } else if (\"text/x-moz-url\" in stringKindsStoredForLater) {\n            handleStringkind(stringKindsStoredForLater[\"text/x-moz-url\"][0])\n        } else if (\"text/uri-list\" in stringKindsStoredForLater) {\n            handleStringkind(stringKindsStoredForLater[\"text/uri-list\"][0])\n        }\n    } else {\n        Object.keys(stringKindsStoredForLater).forEach(type => {\n            handleStringkind(stringKindsStoredForLater[type][0])\n        })\n    }\n}\n\n/*\n * Because this happens before the workspace is setup, we set the drop listen\n * when the target becomes available.\n */\nlet defineCustomDropHandler = () => {\n    if ($('#red-ui-drop-target').length > 0) {\n        $('#red-ui-drop-target').on(\"drop\", customDropHandler)\n    } else {\n        setTimeout(defineCustomDropHandler, 300)\n    }\n}\nsetTimeout(defineCustomDropHandler, 300)\n\n","format":"javascript","x":272,"y":255.5,"wires":[[]]},{"id":"e684694e5640b540","type":"inject","z":"ba3d72801a820b0f","g":"f54de819f4dd9ae5","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":137,"y":140,"wires":[["1846a099491d2951"]]},{"id":"fc05c81222164d70","type":"file","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","filename":"filename","filenameType":"msg","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":530,"y":500,"wires":[["392aec9c291c0c7b"]]},{"id":"38743bd0c91a72e2","type":"file","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","filename":"filename","filenameType":"msg","appendNewline":false,"createDir":false,"overwriteFile":"delete","encoding":"none","x":497.4444580078125,"y":417.3332824707031,"wires":[["fc05c81222164d70"]]},{"id":"19c3214738ab7c39","type":"catch","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","scope":["38743bd0c91a72e2"],"uncaught":false,"x":572.4444580078125,"y":369.333251953125,"wires":[["2f360c5d587004fb"]]},{"id":"f5b043069bd12085","type":"http in","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","url":"/writermap/content","method":"post","upload":true,"swaggerDoc":"","x":538,"y":133,"wires":[["de0300e792ac5f0f"]]},{"id":"de0300e792ac5f0f","type":"switch","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"is file attached?","property":"req.files","propertyType":"msg","rules":[{"t":"null"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":508,"y":203.91665649414062,"wires":[[],["cf41acfd66c6c5f9"]],"outputLabels":["no","yes"]},{"id":"2f360c5d587004fb","type":"change","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","rules":[{"t":"delete","p":"error","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":706,"y":441,"wires":[["fc05c81222164d70"]]},{"id":"df6a14367a3ffe6a","type":"http response","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","statusCode":"200","headers":{"content-type":"application/json"},"x":891,"y":274.83331298828125,"wires":[]},{"id":"cf41acfd66c6c5f9","type":"change","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","rules":[{"t":"set","p":"file","pt":"msg","to":"req.files[0]","tot":"msg"},{"t":"set","p":"payload","pt":"msg","to":"file.buffer","tot":"msg","dc":true},{"t":"set","p":"file","pt":"msg","to":"{\t        \"lastModified\": $now(),\t        \"name\": $$.file.originalname,\t        \"size\": $$.file.size,\t        \"type\": $$.file.mimetype\t}","tot":"jsonata"},{"t":"set","p":"filenamestandalone","pt":"msg","to":"$string($millis() & \"_\" & $replace($$.file.name, /[\\t\\n ]/, \"_\"))","tot":"jsonata"},{"t":"set","p":"filename","pt":"msg","to":"$string(\"/data/content/\" & $$.filenamestandalone)","tot":"jsonata"},{"t":"set","p":"mdlink","pt":"msg","to":"$string(\"/writermap/content/\" & $$.filenamestandalone)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":508,"y":274.83331298828125,"wires":[["38743bd0c91a72e2"]]},{"id":"0d0551f73149a5b9","type":"catch","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","scope":["1e1596f974dafebd","535f842df60160bc"],"uncaught":false,"x":475.3333740234375,"y":641.5,"wires":[["8112155716fb80a7"]]},{"id":"ef33744d528bc3df","type":"http response","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"other","statusCode":"","headers":{},"x":882,"y":641.5,"wires":[]},{"id":"1e1596f974dafebd","type":"http in","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","url":"/writermap/content/:path","method":"get","upload":false,"swaggerDoc":"","x":547.9993591308594,"y":831.33349609375,"wires":[["9b0d206ccd6eeb89"]]},{"id":"392aec9c291c0c7b","type":"change","z":"ba3d72801a820b0f","g":"abfe9a27010ac650","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"relative_url\": $$.mdlink\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":871,"y":501,"wires":[["df6a14367a3ffe6a"]]},{"id":"8112155716fb80a7","type":"change","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","rules":[{"t":"set","p":"statusCode","pt":"msg","to":"404","tot":"num"},{"t":"set","p":"payload","pt":"msg","to":" {\t    \"status\": \"not_found\",\t    \"msg\": \"page not found\",\t    \"path\": $$.req.originalUrl\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":678.6666870117188,"y":641.5,"wires":[["ef33744d528bc3df"]]},{"id":"9b0d206ccd6eeb89","type":"change","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","rules":[{"t":"set","p":"filename","pt":"msg","to":"\"/data/content/\" & $$.req.params.path","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":882,"y":832,"wires":[["45d86b81b52eb217"]]},{"id":"45d86b81b52eb217","type":"file in","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","filename":"filename","filenameType":"msg","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":598,"y":775,"wires":[["c94eb1801f6f17d2"]]},{"id":"c94eb1801f6f17d2","type":"http response","z":"ba3d72801a820b0f","g":"11d5e33de669cf2d","name":"","statusCode":"","headers":{},"x":882,"y":734,"wires":[]}]